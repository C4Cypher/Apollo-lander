:- module (luaMR.api).
:- use_module bool.
:- use_module builtin.
:- use_module char.
:- use_module exception.
:- use_module float.
:- use_module int.
:- use_module io.
:- use_module list.
:- use_module private_builtin.
:- use_module require.
:- use_module solutions.
:- use_module string.
:- use_module type_desc.
:- use_module univ.
:- use_module (luaMR.api).
:- use_module (luaMR.state).

:- pragma foreign_import_module("C", array).
:- pragma foreign_import_module("C", bitmap).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C", luaMR).
:- pragma foreign_import_module("C", stm_builtin).
:- pragma foreign_import_module("C", store).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C", trail).
:- pragma foreign_import_module("C", (luaMR.api)).
:- pragma foreign_import_module("C", (luaMR.state)).
:- pragma foreign_import_module("C#", array).
:- pragma foreign_import_module("C#", bitmap).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("C#", rtti_implementation).
:- pragma foreign_import_module("C#", store).
:- pragma foreign_import_module("C#", string).
:- pragma foreign_import_module("Java", array).
:- pragma foreign_import_module("Java", bitmap).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("Java", rtti_implementation).
:- pragma foreign_import_module("Java", store).
:- pragma foreign_import_module("Java", string).
:- pragma foreign_import_module("Erlang", array).
:- pragma foreign_import_module("Erlang", bitmap).
:- pragma foreign_import_module("Erlang", io).
:- pragma foreign_import_module("Erlang", store).

:- semipure func (luaMR.api).lua_tomruserdata(int, luaMR.lua) = univ.univ.
:- mode (luaMR.api).lua_tomruserdata((builtin.in), (builtin.in)) = (builtin.out) is det.
:- pred (luaMR.api).posindex2(int, int).
:- mode (luaMR.api).posindex2((builtin.in), (builtin.out)) is nondet.
:- semipure func (luaMR.api).to_localvar(int, luaMR.lua) = luaMR.var.
:- mode (luaMR.api).to_localvar((builtin.in), (builtin.in)) = (builtin.out) is det.
:- semipure func (luaMR.api).to_refvar(int, luaMR.lua) = luaMR.var.
:- mode (luaMR.api).to_refvar((builtin.in), (builtin.in)) = (builtin.out) is det.
:- semipure func (luaMR.api).to_value(int, (semipure (func(int, luaMR.lua) = luaMR.var)), luaMR.lua) = luaMR.value.
:- mode (luaMR.api).to_value((builtin.in), (builtin.in), (builtin.in)) = (builtin.out) is det.

:- pragma inline(((luaMR.api).absolute)/2).
:- pragma foreign_proc("C", (luaMR.api).absolute(I :: (builtin.out), L :: (builtin.in)) = (A :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "\015\
	I = A > 0 ? I : lua_gettop(L) + 1 + I;").
:- pragma foreign_proc("C", (luaMR.api).absolute(I :: (builtin.in), L :: (builtin.in)) = (A :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "\015\
	A = I > 0 ? I : lua_gettop(L) + 1 + I;").

(luaMR.api).func_udata(V_3) = V_4 :-
    V_4 = (luaMR.api).mr_func(V_3) : luaMR.api.func_udata.

:- pragma inline(((luaMR.api).globalindex)/0).
:- pragma foreign_proc("C", (luaMR.api).globalindex = (I :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_pure, may_modify_trail], "I = LUA_GLOBALSINDEX;").

:- pragma inline(((luaMR.api).index)/1).
(luaMR.api).index(V_3) = V_3.

(luaMR.api).local_value(V_4, V_5) = V_6 :-
    V_7 = (luaMR.api).to_localvar : (semipure (func(int, luaMR.lua) = luaMR.var)),
    semipure V_6 = (luaMR.api).to_value(V_4, V_7, V_5).

:- pragma inline(((luaMR.api).lua_checkstack)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_checkstack(Free :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_checkstack(L, Free);").

:- pragma inline(((luaMR.api).lua_gettop)/1).
:- pragma foreign_proc("C", (luaMR.api).lua_gettop(L :: (builtin.in)) = (Index :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "Index = lua_gettop(L); ").

:- pragma inline(((luaMR.api).lua_isboolean)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_isboolean(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_isboolean(L, Index);").

:- pragma inline(((luaMR.api).lua_iscfunction)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_iscfunction(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_iscfunction(L, Index);").

:- pragma inline(((luaMR.api).lua_isfunction)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_isfunction(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_isfunction(L, Index);").

:- pragma inline(((luaMR.api).lua_isinteger)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_isinteger(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "\015\
	if(lua_isnumber(L, Index));\015\
	 SUCCESS_INDICATOR = \015\
	 	!(lua_tonumber(L, Index) - lua_tointeger(L, Index));").

:- pragma inline(((luaMR.api).lua_islightuserdata)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_islightuserdata(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_islightuserdata(L, Index);").

:- pragma foreign_proc("C", (luaMR.api).lua_ismruserdata(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "\015\
	int Top = lua_gettop(L);\015\
	lua_pushvalue(L, Index); /* 1 */	\015\
	if(lua_isuserdata(L, -1) && lua_getmetatable(L, -1)) { /* 2 */ \015\
		lua_pushstring(L, LUA_MR_USERDATA);\015\
		lua_rawget(L, -2);\015\
		SUCCESS_INDICATOR = lua_toboolean(L, -1); \015\
		lua_settop(L, Top);\015\
	} else {\015\
		SUCCESS_INDICATOR = 0;\015\
		lua_settop(L, Top);\015\
	}\015\
").

:- pragma inline(((luaMR.api).lua_isnil)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_isnil(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_isnil(L, Index);").

:- pragma inline(((luaMR.api).lua_isnumber)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_isnumber(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], " SUCCESS_INDICATOR = lua_isnumber(L, Index);").

:- pragma inline(((luaMR.api).lua_isstring)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_isstring(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], " SUCCESS_INDICATOR = lua_isstring(L, Index);").

:- pragma inline(((luaMR.api).lua_istable)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_istable(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_istable(L, Index);").

:- pragma inline(((luaMR.api).lua_isthread)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_isthread(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_isthread(L, Index);").

:- pragma inline(((luaMR.api).lua_isuserdata)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_isuserdata(Index :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_isuserdata(L, Index);").

:- pragma inline(((luaMR.api).lua_new)/0).
:- pragma foreign_proc("C", (luaMR.api).lua_new = (L :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_pure, may_modify_trail], "\015\
	void * ptr = MR_malloc(sizeof(ptr));\015\
	L = lua_newstate((lua_Alloc)luaMR_alloc, ptr);\015\
	luaL_openlibs(L);\015\
	luaMR_init(L);\015\
	").

(luaMR.api).lua_posindex(V_3, V_4) :-
    semipure V_5 = (luaMR.api).lua_gettop(V_4),
    (luaMR.api).posindex2(V_5, V_3).

:- pragma inline(((luaMR.api).lua_rawequal)/3).
:- pragma foreign_proc("C", (luaMR.api).lua_rawequal(Index1 :: (builtin.in), Index2 :: (builtin.in), L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "SUCCESS_INDICATOR = lua_rawequal(L, Index1, Index2);").

:- pragma foreign_proc("C", (luaMR.api).lua_status(L :: (builtin.in)) = (S :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "S = lua_status(L);").

:- pragma inline(((luaMR.api).lua_toboolean)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_toboolean(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "V = lua_toboolean(L, Index) ? MR_YES : MR_NO;").

:- pragma inline(((luaMR.api).lua_tocfunction)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_tocfunction(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "V = lua_tocfunction(L, Index);").

:- pragma inline(((luaMR.api).lua_tocuserdata)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_tocuserdata(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "V = (size_t)lua_touserdata(L, Index);").

:- pragma inline(((luaMR.api).lua_tointeger)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_tointeger(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "V = lua_tointeger(L, Index);").

:- pragma foreign_proc("C", (luaMR.api).lua_tomruserdata(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "V = **(MR_Word **)lua_touserdata(L, Index);").

:- pragma inline(((luaMR.api).lua_tonumber)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_tonumber(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "V = lua_tonumber(L, Index);").

:- pragma inline(((luaMR.api).lua_toref)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_toref(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "V = (luaMR_Ref)luaMR_newref(L, Index);").

:- pragma foreign_proc("C", (luaMR.api).lua_tostring(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "\015\
	V = MR_copy_string(lua_tostring(L, Index));\015\
").

:- pragma inline(((luaMR.api).lua_tothread)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_tothread(Index :: (builtin.in), L :: (builtin.in)) = (V :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "V = lua_tothread(L, Index);").

:- pragma inline(((luaMR.api).lua_touserdata)/2).
(luaMR.api).lua_touserdata(V_4, V_5) = V_6 :-
    ( if
      semipure (luaMR.api).lua_ismruserdata(V_4, V_5)
    then
      semipure V_6 = (luaMR.api).lua_tomruserdata(V_4, V_5)
    else
      semipure V_7 = (luaMR.api).lua_tocuserdata(V_4, V_5),
      V_6 = univ.univ(V_7)
    ).

:- pragma inline(((luaMR.api).lua_type)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_type(Index :: (builtin.in), L :: (builtin.in)) = (Type :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "Type = lua_type(L, Index);").

:- pragma inline(((luaMR.api).lua_typename)/2).
:- pragma foreign_proc("C", (luaMR.api).lua_typename(Index :: (builtin.in), L :: (builtin.in)) = (Name :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "Name = (char *)lua_typename(L, lua_type(L, Index));").

:- pragma inline(((luaMR.api).multret)/0).
:- pragma foreign_proc("C", (luaMR.api).multret = (M :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_pure, may_modify_trail], "M = LUA_MULTRET;").

:- pragma inline(((luaMR.api).registryindex)/0).
:- pragma foreign_proc("C", (luaMR.api).registryindex = (I :: (builtin.out)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_pure, may_modify_trail], "I = LUA_REGISTRYINDEX;").

(luaMR.api).to_localvar(V_4, V_5) = V_6 :-
    V_6 = luaMR.local(V_4) : luaMR.var,
    semipure builtin.semipure_true.

(luaMR.api).to_refvar(V_4, V_5) = V_6 :-
    semipure V_7 = (luaMR.api).lua_toref(V_4, V_5),
    V_6 = luaMR.ref(V_7) : luaMR.var.

(luaMR.api).to_value(V_4, V_5) = V_6 :-
    V_7 = (luaMR.api).to_refvar : (semipure (func(int, luaMR.lua) = luaMR.var)),
    semipure V_6 = (luaMR.api).to_value(V_4, V_7, V_5).

(luaMR.api).to_values(V_4, V_5) = V_6 :-
    semipure (luaMR.api).to_values(V_4, V_6, V_5).

(luaMR.api).var_type(V_4, V_5) = V_6 :-
    semipure (luaMR.api).var_type(V_4, V_6, V_5).
