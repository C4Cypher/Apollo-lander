:- module luaMR.
:- use_module bool.
:- use_module builtin.
:- use_module char.
:- use_module exception.
:- use_module float.
:- use_module int.
:- use_module io.
:- use_module list.
:- use_module private_builtin.
:- use_module require.
:- use_module solutions.
:- use_module string.
:- use_module type_desc.
:- use_module univ.
:- use_module (luaMR.api).
:- use_module (luaMR.state).

:- type c_function.
:- pragma foreign_type(c, c_function, "lua_CFunction").
:- type index == int.
:- type lua.
:- pragma foreign_type(c, lua, "lua_State *", [can_pass_as_mercury_type]).
:- type lua_state.
:- pragma foreign_type(c, lua_state, "luaMR_lua_state *").
:- type ref.
:- pragma foreign_type(c, ref, "luaMR_Ref", [can_pass_as_mercury_type]).

:- pragma foreign_import_module("C", array).
:- pragma foreign_import_module("C", bitmap).
:- pragma foreign_import_module("C", io).
:- pragma foreign_import_module("C", luaMR).
:- pragma foreign_import_module("C", stm_builtin).
:- pragma foreign_import_module("C", store).
:- pragma foreign_import_module("C", string).
:- pragma foreign_import_module("C", time).
:- pragma foreign_import_module("C", trail).
:- pragma foreign_import_module("C", (luaMR.api)).
:- pragma foreign_import_module("C", (luaMR.state)).
:- pragma foreign_import_module("C#", array).
:- pragma foreign_import_module("C#", bitmap).
:- pragma foreign_import_module("C#", io).
:- pragma foreign_import_module("C#", rtti_implementation).
:- pragma foreign_import_module("C#", store).
:- pragma foreign_import_module("C#", string).
:- pragma foreign_import_module("Java", array).
:- pragma foreign_import_module("Java", bitmap).
:- pragma foreign_import_module("Java", io).
:- pragma foreign_import_module("Java", rtti_implementation).
:- pragma foreign_import_module("Java", store).
:- pragma foreign_import_module("Java", string).
:- pragma foreign_import_module("Erlang", array).
:- pragma foreign_import_module("Erlang", bitmap).
:- pragma foreign_import_module("Erlang", io).
:- pragma foreign_import_module("Erlang", store).

luaMR.(V_4 ^ V_5) = luaMR.index(V_6, V_4) :-
    V_6 = luaMR.value(V_5).

luaMR.call_lua_func(V_6, V_7, V_10, V_11) = V_9 :-
    luaMR.call_lua_func(V_6, V_7, V_9, V_10, V_11).

luaMR.get(V_5, V_8, V_9) = V_7 :-
    luaMR.get(V_5, V_7, V_8, V_9).

:- pragma foreign_proc("C", luaMR.init_lua(L :: (builtin.in), _I :: (builtin.di), _O :: (builtin.uo)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_pure, may_modify_trail], "luaMR_init(L);").

luaMR.local(V_4, V_5) = V_6 :-
    luaMR.local(V_6, V_4, V_5).

luaMR.local_table(V_6, V_7) = V_5 :-
    luaMR.local_table(V_5, V_6, V_7).

luaMR.new_state(V_1) :-
    V_1 = luaMR.new_state.

luaMR.new_state = V_1 :-
    V_1 = (luaMR.state).lua_state(V_2, V_3, V_4),
    V_2 = (luaMR.api).lua_new,
    V_3 = (luaMR.state).null_id,
    V_4 = (luaMR.state).empty_trail : luaMR.state.lua_trail.

:- pragma foreign_proc("C", luaMR.ready(L :: (builtin.in)), [will_not_call_mercury, not_thread_safe, not_tabled_for_io, promise_semipure, may_modify_trail], "\015\
	SUCCESS_INDICATOR = luaMR_ready(L);\015\
").

luaMR.ready(V_1, V_2) :-
    V_1 = (luaMR.state).lua_state(V_3, V_4, V_5),
    V_2 = (luaMR.state).lua_state(V_3, V_4, V_5),
    promise_pure (
      semipure luaMR.ready(V_3)
    ).

luaMR.ref_table(V_6, V_7) = V_5 :-
    luaMR.ref_table(V_5, V_6, V_7).

luaMR.string_to_func(V_5, V_6, V_7) = V_8 :-
    luaMR.string_to_func(V_5, V_8, V_6, V_7).

:- pragma promise_pure((luaMR.valid_var)/3).
luaMR.valid_var(V_4, V_2, V_3) :-
    V_2 = (luaMR.state).ls(V_5, V_6, V_7),
    V_3 = (luaMR.state).ls(V_5, V_6, V_7),
    semipure (luaMR.api).valid_var(V_4, V_5).

:- pragma promise_pure((luaMR.value_equal)/4).
luaMR.value_equal(V_5, V_6, V_3, V_4) :-
    V_3 = (luaMR.state).ls(V_7, V_8, V_9),
    V_4 = (luaMR.state).ls(V_7, V_8, V_9),
    semipure (luaMR.api).value_equal(V_5, V_6, V_7).

luaMR.value_of(V_3) = V_4 :-
    V_3 = luaMR.value(V_4).

:- pragma promise_pure((luaMR.var_equal)/4).
luaMR.var_equal(V_5, V_6, V_3, V_4) :-
    V_3 = (luaMR.state).ls(V_7, V_8, V_9),
    V_4 = (luaMR.state).ls(V_7, V_8, V_9),
    semipure (luaMR.api).var_equal(V_5, V_6, V_7).

:- pragma promise_pure((luaMR.var_type)/4).
luaMR.var_type(V_5, V_6, V_3, V_4) :-
    V_3 = (luaMR.state).ls(V_7, V_8, V_9),
    V_4 = (luaMR.state).ls(V_7, V_8, V_9),
    semipure (luaMR.api).var_type(V_5, V_6, V_7).

luaMR.var_type(V_5, V_8, V_9) = V_7 :-
    luaMR.var_type(V_5, V_7, V_8, V_9).
