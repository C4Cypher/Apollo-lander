#-----------------------------------------------------------------------------#
# This source file was adapted from 
# samples/c_interface/mercury_calls_cplusplus/Mmakefile by C4Cypher, it was
# placed in the public domain by it's original author fjh and will continue
# to remain in the public domain independently of the other files.
#-----------------------------------------------------------------------------#

MAIN_TARGET=all

depend: libapollo.depend
all: libapollo

#-----------------------------------------------------------------------------#

.SUFFIXES: .cc
.cc.o:
	$(CXX) $(HACK) $(CXXFLAGS) -c $<

CXX=$(MGNUC) $(ALL_GRADEFLAGS) $(ALL_MGNUCFLAGS)
CXXFLAGS=

# We need to link in the C++ standard library.
MLLIBS = -lstdc++

# Another alternative, rather than explicitly linking in -lstdc++ like we
# do above, would be to use g++ rather than gcc to do the linking, like
# this:
#ML =		MERCURY_C_COMPILER=g++ \
#		MERCURY_LINK_SHARED_OBJ="g++ -shared" \
#		ml

# Due to a bug in g++ 2.7, global register variables don't work in C++.
# Hence we need to ensure that we don't include the global register
# variable declarations.  The following hack seems to do the trick.
# This is commented out now because it should not be needed with
# g++ 2.95 or later.
#
HACK=
#HACK=		-DMR_MACHDEPS_ALPHA_REGS_H \
#		-DMR_MACHDEPS_MIPS_REGS_H \
#		-DMR_MACHDEPS_SPARC_REGS_H \
#		-DMR_MACHDEPS_I386_REGS_H \
#		-DMR_MACHDEPS_PA_REGS_H \
#		-DMR_MACHDEPS_RS6000_REGS_H

#-----------------------------------------------------------------------------#

# tell the Mercury linker to link in lua_var.o
MLOBJS=lua_var.o


# liblua contains the actual mercury code, however libapollo contains the
# foreign interfaces that are accessable to both Lua and C.
libapollo: lua

# tell mmake that it needs to make lua_var.o before it can make liblua
lua:
	lua_var.o
	liblua

# make sure that `mmake clean' removes lua_var.o
clean_local:
	rm -f lua_var.o

#-----------------------------------------------------------------------------#
